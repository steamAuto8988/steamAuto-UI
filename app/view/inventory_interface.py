# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\inventory.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QWidget, QTableWidgetItem
from qfluentwidgets import CheckBox, ComboBox, SearchLineEdit, TableWidget, InfoBar, InfoBarPosition, \
    IndeterminateProgressRing, PushButton, FluentIcon

from app.config.config import GameInfo, get_global_value
from app.steam.inventory import InventoryCode
from app.thread.LoadSteamInventoryThread import LoadSteamInventoryThread


class InventoryInterface(QWidget):

    def __init__(self, parent=None):
        super().__init__(parent=parent)
        self.TableWidget = TableWidget(self)
        self.indeterminateProgressRing = IndeterminateProgressRing(self, start=False)
        self.loadSteamDatas = []
        self.canTradeCheckBox = CheckBox(self)
        self.changeSteamComboBox = ComboBox(self)
        self.reloadInventoryPushButton = PushButton(self)
        self.changeSteamComboBoxDefaultText = "请选择steam账号"
        self.changeSteamComboBox.addItem(self.changeSteamComboBoxDefaultText)
        self.changeSteamComboBox.clicked.connect(self.changeSteamComboBoxText)
        self.changeSteamComboBox.currentTextChanged.connect(self._loadInventory)
        self.reloadInventoryPushButton.clicked.connect(self._reloadInventoryPushButtonClicked)
        self.changeGameCombo = ComboBox(self)
        self.searchProductLineEdit = SearchLineEdit(self)
        self.searchProductLineEdit.textChanged.connect(self._searchProductLineEdittextChanged)
        self.canTradeCheckBox.clicked.connect(self._canTradeCheckBoxClicked)
        self.inventoryRespList = []

        self.setupUi()
        self.retranslateUi()

    def setupUi(self):
        self.canTradeCheckBox.setObjectName("canTradeCheckBox")
        self.changeSteamComboBox.setObjectName("changeSteamComboBox")
        self.changeGameCombo.setObjectName("changeGameCombo")
        self.searchProductLineEdit.setObjectName("searchProductLineEdit")
        self.canTradeCheckBox.setGeometry(QtCore.QRect(470, 20, 141, 41))
        self.changeSteamComboBox.setGeometry(QtCore.QRect(230, 20, 211, 32))
        self.changeGameCombo.setGeometry(QtCore.QRect(20, 20, 181, 32))

        self.reloadInventoryPushButton.setGeometry(QtCore.QRect(610, 20, 120, 32))

        self.searchProductLineEdit.setGeometry(QtCore.QRect(810, 20, 310, 33))
        # 加载 进度显示位置
        self.indeterminateProgressRing.setGeometry(QtCore.QRect(500, 370, 80, 80))

        self.TableWidget.setEnabled(True)
        self.TableWidget.setGeometry(QtCore.QRect(0, 70, 1100, 700))
        self.TableWidget.setObjectName("TableWidget")
        self.TableWidget.setColumnCount(5)
        self.TableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.TableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.TableWidget.setColumnWidth(1, 300)
        self.TableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.TableWidget.setColumnWidth(2, 300)
        self.TableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.TableWidget.setColumnWidth(3, 260)
        self.TableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.TableWidget.setHorizontalHeaderItem(4, item)

        self.TableWidget.setWordWrap(False)
        self.TableWidget.verticalHeader().hide()

    def retranslateUi(self, ):
        item = self.TableWidget.horizontalHeaderItem(0)
        item.setText(self.tr("#"))
        item = self.TableWidget.horizontalHeaderItem(1)
        item.setText(self.tr("中文名"))
        item = self.TableWidget.horizontalHeaderItem(2)
        item.setText(self.tr("英文名"))
        item = self.TableWidget.horizontalHeaderItem(3)
        item.setText(self.tr("ASSET ID"))
        item = self.TableWidget.horizontalHeaderItem(4)
        item.setText(self.tr("可交易"))
        self.canTradeCheckBox.setText(self.tr("只显示可交易"))
        self.reloadInventoryPushButton.setText(self.tr('重新加载'))
        self.reloadInventoryPushButton.setIcon(FluentIcon.SEARCH.icon())
        # 处理游戏下拉选择框
        for item in GameInfo.items():
            print(item)
            self.changeGameCombo.addItem(item[1])

    def changeSteamComboBoxText(self):
        items = self.changeSteamComboBox.items
        self.loadSteamDatas = get_global_value('steamDatas')
        if items.__len__() == len(self.loadSteamDatas) + 1:
            return
        self.changeSteamComboBox.items.clear()
        self.changeSteamComboBox.addItem(self.changeSteamComboBoxDefaultText)
        for item in self.loadSteamDatas:
            self.changeSteamComboBox.addItem(item.account)

    def _loadInventory(self):
        account = self.changeSteamComboBox.text()
        steamId = None
        for loadSteamData in self.loadSteamDatas:
            if loadSteamData.account == account:
                steamId = loadSteamData.steamId
                InfoBar.success(
                    title='加载库存',
                    content=f'开始加载账号：{account} 的库存',
                    orient=Qt.Horizontal,
                    isClosable=True,
                    position=InfoBarPosition.TOP_RIGHT,
                    # position='Custom',   # NOTE: use custom info bar manager
                    duration=3000,
                    parent=self.parent()
                )
                self.indeterminateProgressRing.start()
                self.TableWidget.clearContents()
                self.TableWidget.setRowCount(0)
                self.LoadSteamInventoryThread = LoadSteamInventoryThread(loadSteamData)
                self.LoadSteamInventoryThread._finished.connect(self._updateSteamInventory)
                self.LoadSteamInventoryThread.start()

                self.canTradeCheckBox.setEnabled(False)
                self.changeSteamComboBox.setEnabled(False)
                self.changeGameCombo.setEnabled(False)

    def _updateSteamInventory(self, inventoryResp):
        self.indeterminateProgressRing.stop()
        self.canTradeCheckBox.setEnabled(True)
        self.changeSteamComboBox.setEnabled(True)
        self.changeGameCombo.setEnabled(True)

        if inventoryResp.code == InventoryCode.retry:
            InfoBar.error(
                title='加载库存',
                content=f'{inventoryResp.account}获取失败，请重试',
                orient=Qt.Horizontal,
                isClosable=True,
                position=InfoBarPosition.TOP_RIGHT,
                # position='Custom',   # NOTE: use custom info bar manager
                duration=3000,
                parent=self.parent()
            )
        elif inventoryResp.code == InventoryCode.toolManyRequest:
            InfoBar.error(
                title='加载库存',
                content=f'{inventoryResp.account}访问steam过快！请切换代理后重试！',
                orient=Qt.Horizontal,
                isClosable=True,
                position=InfoBarPosition.TOP_RIGHT,
                # position='Custom',   # NOTE: use custom info bar manager
                duration=3000,
                parent=self.parent()
            )
        elif inventoryResp.code == InventoryCode.notOpen:
            InfoBar.error(
                title='加载库存',
                content=f'请公开：{inventoryResp.account} 的库存',
                orient=Qt.Horizontal,
                isClosable=True,
                position=InfoBarPosition.TOP_RIGHT,
                # position='Custom',   # NOTE: use custom info bar manager
                duration=3000,
                parent=self.parent()
            )
        elif inventoryResp.code == InventoryCode.inventoryIsZero:
            InfoBar.warning(
                title='加载库存',
                content=f'{inventoryResp.account} 的库存数量为0',
                orient=Qt.Horizontal,
                isClosable=True,
                position=InfoBarPosition.TOP_RIGHT,
                # position='Custom',   # NOTE: use custom info bar manager
                duration=3000,
                parent=self.parent()
            )
        else:
            InfoBar.success(
                title='加载库存',
                content=f'读取：{inventoryResp.account} 的库存成功，库存总数：{len(inventoryResp.assets)}',
                orient=Qt.Horizontal,
                isClosable=True,
                position=InfoBarPosition.TOP_RIGHT,
                # position='Custom',   # NOTE: use custom info bar manager
                duration=3000,
                parent=self.parent()
            )
            self.inventoryRespList = inventoryResp.assets
            self._showTableWidget(text='', canTrade=self.canTradeCheckBox.isChecked())

    def _searchProductLineEdittextChanged(self, text):
        self._showTableWidget(text, self.canTradeCheckBox.isChecked())

    def _canTradeCheckBoxClicked(self):
        self._showTableWidget(self.searchProductLineEdit.text(), self.canTradeCheckBox.isChecked())

    def _showTableWidget(self, text: str, canTrade: bool):
        self.TableWidget.clearContents()
        self.TableWidget.setRowCount(0)
        print(f'搜索文本：{text},canTrade:{canTrade}')
        i = 0

        for item in self.inventoryRespList:
            if canTrade and item.descriptions.canTrade is False:
                continue
            if text != '' and text not in item.descriptions.market_name:
                continue
            self.TableWidget.setRowCount(i + 1)
            # 不要了原生序号，太丑了，自己弄一个
            tItem = QTableWidgetItem(str(i + 1))
            tItem.setTextAlignment(Qt.AlignCenter)
            self.TableWidget.setItem(i, 0, tItem)
            # 中文名
            tItem = QTableWidgetItem(item.descriptions.market_name)
            tItem.setTextAlignment(Qt.AlignCenter)
            self.TableWidget.setItem(i, 1, tItem)
            # 英文名
            tItem = QTableWidgetItem(item.descriptions.market_hash_name)
            tItem.setTextAlignment(Qt.AlignCenter)
            self.TableWidget.setItem(i, 2, tItem)

            # 是否可交易
            tItem = QTableWidgetItem(item.assetid)
            tItem.setTextAlignment(Qt.AlignCenter)
            self.TableWidget.setItem(i, 3, tItem)

            # 是否可交易
            msg = '可交易'
            if item.descriptions.canTrade is False:
                msg = "冷却中"
            tItem = QTableWidgetItem(msg)
            tItem.setTextAlignment(Qt.AlignCenter)
            self.TableWidget.setItem(i, 4, tItem)

            i += 1

    def _reloadInventoryPushButtonClicked(self):
        if self.changeSteamComboBox.text() == '请选择steam账号':
            InfoBar.success(
                title='加载库存',
                content='请选择steam账号后重试',
                orient=Qt.Horizontal,
                isClosable=True,
                position=InfoBarPosition.TOP_RIGHT,
                # position='Custom',   # NOTE: use custom info bar manager
                duration=3000,
                parent=self.parent()
            )
            return
        self._loadInventory()
